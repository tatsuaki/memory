apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "24.0.0 rc2"
    defaultConfig {
        applicationId "memory.com.test.kin.my.testes.tes.memoryapp"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 5
        versionName '0.9.2'
    }
    signingConfigs {
        keys {
            try {
                File keystorePropertiesFile = file('../keystore/release.properties')
                storeFile file('../keystore/memory_key.jks')
                Properties properties = new Properties()
                keystorePropertiesFile.withInputStream {
                    properties.load(it)
                }
                keyAlias properties.getProperty('KEY_ALIAS')
                keyPassword properties.getProperty('KEYSTORE_PASSWORD')
                storePassword properties.getProperty('KEYSTORE_PASSWORD')
            } catch (ignored) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in release.properties.")
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.keys
            debuggable true
            zipAlignEnabled true
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix '.debug'
            debuggable true
            zipAlignEnabled true
        }
    }
    applicationVariants.all { variant ->
        if (variant.buildType.name.equals("release")) {
            variant.outputs.each { output ->
                System.println("* output.outputFile.name : ${output.outputFile.name}")
                if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                    def file = output.outputFile
                    def appName = "munef"
                //  def newName = "${appName}${defaultConfig.versionCode}_v${defaultConfig.versionName}.apk"
                    def newName = "${appName}${defaultConfig.versionCode}.apk"
                    output.outputFile = new File(file.parent, newName)

                    def publish = project.tasks.create("publish_${appName}")
                    // Move and Rename APK
                    def task = project.tasks.create("publish${variant.name.capitalize()}Apk", Copy)
                    task.from(output.outputFile)
                //  task.rename(output.outputFile.name, newName)
                    task.into(deployTo)

                    task.dependsOn variant.assemble
                    publish.dependsOn task
                }
            }
        }
    }
    productFlavors {
    }
}

dependencies {
    compile project(':mylib')
}

task exportApk(type: Copy, dependsOn: assembleRelease)  {
    from('build/outputs/apk/')
    into('/../apks/')
//  def appName = "munef"
    include('${appName}${defaultConfig.versionCode}.apk')
//  include('munef3.apk')
//  rename('${appName}${defaultConfig.versionCode}.apk', 'android-lib.aar')
}

task exportAar(type: Copy, dependsOn: assembleRelease)  {
    from('build/outputs/aar/')
    into('/../../Assets/Plugins/Android/')
    include('lib-release.aar')
    rename('lib-release.aar', 'android-lib.aar')
}